run
	- initializes everything and does all calibrations

realtime
	- realtime operation
	- an OSC client needs to send a /pf/adddest message to the server (at port 7000) before messages get sent to client
	     - client sends its address, realtime then sends to that address until cleared
	- use 'saverecvis' after realtime to save data
	- uses C++ frontend by default

replay
	- reruns last realtime
	- edit plots at top to change which plots are drawn 

frontend
	- start as separate process, sends/receives OSC messages
	- run 'rcvr('init')'   or getvisible('init') (which calls the former) to setup 
	- matlab sends its UDP destination address to frontend, which then sends messages to that

testing:
	- testrcvr to compare matlab and frontend computations
	- vis=getvisible(p,'stats'); plotvisible(p,vis) for quick assessment (using matlab I/O)
	- or:  vis=rcvr(p,'stats'); plotvisible(p,vis) for quick assessment (using frontend)
	- analyze(p,vis.v,2)  for analysis plots  (Use recvis.vis(NNN).v for particular parts of recording)
	

Misc:

- levcheck(p,1)  to measure camera response to increasing LED levels in various colors
- locatecameras()  adjust stored positions of cameras by using a manual process;  edit run to hardcode the coords in cposcalib so it doesn't have to run repeatedly

